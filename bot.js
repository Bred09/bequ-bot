// IMPORTS =============================>
import "dotenv/config";
import { Markup, Telegraf } from "telegraf";
import { message } from "telegraf/filters";
import generatePDF, { getPDF } from "./pdf_generator.js";
import readTable from "./table_reader.js";
import path from "path";
import { fileURLToPath } from "url";
// DB
import { addUser, findUserById, addUserPhone, checkAuth } from "./db.js";

// Settings =========>
const pe = process.env;
const token = pe.APP_TYPE === "dev" ? pe.DEV : pe.PROD;
const bot = new Telegraf(token);
const helpCaption = `
- –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–∞–±–ª–∏—Ü—É —ç–∫—Å–µ–ª—å (.xlsx) –∏ —è –Ω–∞–ø–µ—á–∞—Ç–∞—é —ç—Ç–∏–∫–µ—Ç–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ

[üìù –®–∞–±–ª–æ–Ω—ã]
/template - —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–∏–∫–µ—Ç–æ–∫ –∫–æ—Ä–æ–±–æ–≤

[‚ö†Ô∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]
/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏`;

// Terminal styles
const FgYellow = "\x1b[33m%s\x1b[0m";

// Stickers [sticker id = ctx.message.sticker.file_id]
const sticGuineaPig =
  "CAACAgIAAxkBAAN6ZxMV75k-n9lFqkJZzfLo0_4tV4YAApYWAALCy_BIaXZUZ53X0Ys2BA";
const sticHamsterBanana =
  "CAACAgIAAxkBAAOlZyQ5suljzEX517ED44lOxjNDK9cAAhJkAAKwcSBJYtzrlvYnfHA2BA";
const sticStop =
  "CAACAgIAAxkBAAID12dGD1HcLrSIkMy7ILmBT_brOEusAAJoEQAC9r6hS93yOBQEg8-JNgQ";
// Settings =========<

// Functions
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ PhotoPath
function pp(filename) {
  return path.join(path.dirname(fileURLToPath(import.meta.url)), filename);
}

// Print SHK boxs
async function printSHK(ctx) {
  try {
    const file_id = await ctx.message.document.file_id;
    const fileLink = await ctx.telegram.getFileLink(file_id);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ –±—É—Ñ–µ—Ä–∞
    const response = await fetch(fileLink);
    const arrayBuffer = await response.arrayBuffer();

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ArrayBuffer –≤ Buffer
    const buffer = Buffer.from(arrayBuffer);

    // –ß—Ç–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const table = readTable(buffer);

    if (table.length > 1000) {
      await ctx.replyWithSticker(sticHamsterBanana);
      return ctx.reply("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –±–æ–ª—å—à–µ 1000 —Å—Ç—Ä–æ–∫");
    }

    await ctx.replyWithSticker(sticGuineaPig);
    ctx.reply(`–ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫: ${table.length}\n\n–û–∂–∏–¥–∞–π—Ç–µ...`);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    const pdfBuffer = await generatePDF(table);

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ArrayBuffer PDF –≤ Buffer
    const pdfFile = Buffer.from(pdfBuffer);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ctx.replyWithDocument(
      {
        source: pdfFile,
        filename: "bequ_wb_bot.pdf",
      },
      { caption: "‚úÖ –≠—Ç–∏–∫–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã!" }
    );

    return;
  } catch (error) {
    ctx.reply(
      "‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ /help"
    );
    console.error(error);
  }
}

// START
bot.start((ctx) => {
  const { id, first_name, username } = ctx.from;

  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${first_name}

–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤–∫–∏, –∞ –¥–∞–ª—å—à–µ —è –≤—Å–µ —É–ª–∞–∂—É —Å–∞–º üòÅ
`
  );
});

// COMMANDS
// Get sticker ID
// bot.on(message('sticker'), (ctx) => ctx.reply(ctx.message.sticker.file_id))

// Get contact
bot.on(message("contact"), (ctx) => {
  const addUserPhoneResult = addUserPhone(
    ctx.from.id,
    ctx.message.contact.phone_number
  );
  if (addUserPhoneResult) {
    ctx.reply("‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!");
  } else {
    ctx.reply("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä. –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º @");
  }
});

bot.help((ctx) => {
  const photoPath = pp("src/imgs/example.png");

  ctx.replyWithPhoto({ source: photoPath }, { caption: helpCaption });
});

bot.command("template", (ctx) => {
  const filePath = pp("src/docs/template.xlsx");

  return ctx.replyWithDocument({ source: filePath }).catch((error) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:", error);
    ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å —à–∞–±–ª–æ–Ω.");
  });
});

bot.on("message", async (ctx) => {
  const { id, first_name, username } = ctx.from;
  console.log(`User: ${id}, ${first_name}, ${username}`);

  
  // Check user
  if (!findUserById(id)) {
    addUser(ctx.from);
  }
  // Check auth =========>
  const checkAuthResult = checkAuth(ctx.from.id);
  console.log(checkAuthResult);

  if (!checkAuthResult) {
    await ctx.replyWithSticker(sticStop);
    ctx.reply(
      "‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ª–∏—á–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
      Markup.keyboard([
        Markup.button.contactRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
      ])
        .resize()
        .oneTime()
    );

    return;
  }

  // –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  // Print .pdf
  if (
    ctx.message.document &&
    ctx.message.document.file_name.endsWith(".xlsx")
  ) {
    printSHK(ctx);
  }

  return ctx.reply("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ");
});

// Start bot =============================>
bot.launch();
console.log("\nApp is running...");
if (pe.APP_TYPE === "dev") {
  console.log(FgYellow, "Dev mode!\n");
}
